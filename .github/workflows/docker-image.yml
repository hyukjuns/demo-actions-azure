name: CI

on:
  # push:
  #   branches: [ "main" ]
  #   paths:
  #     - app/**
  # pull_request:
  #   branches: [ "main" ]
  #   paths:
  #     - app/**
  workflow_dispatch:

env:
  REGISTRY: devghactionacr001.azurecr.io
  IMAGE_NAME: demo-fastapi-webapp
  STORAGE_NAME: devghactionsac001
  STORAGE_CONTAINER_NAME: test
  DOWNLOAD_FILENAME: test.txt

jobs:

  test:
    # runs-on: ubuntu-latest
    runs-on: [self-hosted, general-cpu]
    steps:

    # 1. Checkout Repo
    - uses: actions/checkout@v4

    # 2. Setup Python version
    - name: Setup Python
      uses: actions/setup-python@v5.2.0
      with:
        python-version: '3.11.7'
        cache: 'pip' # caching pip dependencies
    
    # 3. Test Python Application
    - name: Pytest
      run: |
          pip install -r requirements.txt
          pip install pytest
          pytest app/test_rest.py | tee app/test-results-${{ github.sha }}.txt
    
    # 4. Upload Test Result to Blob Storage
    - name: Azure login
      uses: azure/login@v2
      with:
        auth-type: IDENTITY # VM System Assigned Identity
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    - name: Azure CLI script - Upload test result file to blob
      uses: azure/cli@v2
      with:
        azcliversion: latest
        inlineScript: |
          az storage blob upload \
            --account-name ${{ env.STORAGE_NAME }}  \
            --container-name ${{ env.STORAGE_CONTAINER_NAME }} \
            --name test-results-${{ github.sha }}.txt \
            --file app/test-results-${{ github.sha }}.txt \
            --auth-mode login

    # Upload Test Reulst as Artifact
    - name: Upload pytest test results
      uses: actions/upload-artifact@v4
      with:
        name: pytest-result
        path: app/test-results.txt
      # Use always() to always run this step to publish test results when there are test failures
      if: ${{ always() }}

    # Setup Docker
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    # Login to ACR
    - name: Docker Login to ACR
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.AZURE_CLIENT_ID }}
        password: ${{ secrets.AZURE_CLIENT_SECRET }}
    
    # 5. Build and Push Container Image to Dockerhub
    - name: Build and Push Docker image to ACR
      uses: docker/build-push-action@v6.9.0
      with:
        context: .
        platforms: linux/amd64
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
    
    # 6. Download Test Tool From Blob
    - name: Azure CLI script - Download File
      uses: azure/cli@v2
      with:
        azcliversion: latest
        inlineScript: |
          mkdir /tmp/dir-${{ github.sha }}
          az storage blob download \
            --account-name ${{ env.STORAGE_NAME }}  \
            --container-name ${{ env.STORAGE_CONTAINER_NAME }} \
            --name ${{ env.DOWNLOAD_FILENAME }} \
            --file "/tmp/dir-${{ github.sha }}/${{ env.DOWNLOAD_FILENAME }}"  \
            --auth-mode login 

    # 7. docker run with volume (with download file) (image from ACR)
    - name: 
      run: | 
        docker run -d -p 8080:8080 \
          --name ${{ github.sha }} \
          -v "/tmp/dir-${{ github.sha }}":/mnt \
          -e FILEPATH="/mnt/${{ env.DOWNLOAD_FILENAME }}" \
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        sleep 5s
        curl localhost:8080/text > test-${{ github.sha }}.txt




    